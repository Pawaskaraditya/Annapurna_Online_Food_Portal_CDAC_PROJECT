package com.anapurna.services;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.anapurna.daos.CustomerDao;
import com.anapurna.daos.DeliveryPersonDao;
import com.anapurna.daos.FoodItemDao;
import com.anapurna.daos.OrderItemDao;
import com.anapurna.daos.OrdersDao;
import com.anapurna.daos.PaymentDao;
import com.anapurna.daos.RestaurentDao;
import com.anapurna.dtos.OrdersDto;
import com.anapurna.dtos.PlaceOrderDto;
import com.anapurna.entities.Customer;
import com.anapurna.entities.DeliveryPerson;
import com.anapurna.entities.OrderItem;
import com.anapurna.entities.Orders;
import com.anapurna.entities.Restaurent;
import com.anapurna.entities.Payment;
import com.anapurna.*;

@Service
@Transactional
//Will take care fo all the order related stuff like placing order,payment
//finding orders by restaurent id etc.
public class OrdersService {
	
	private static final String DaoToEntityConverter = null;

	@Autowired
	private OrdersDao ordersDao;
	
	@Autowired
	private RestaurentDao restaurentDao;
	
	@Autowired
	private OrderItemDao orderItemDao;
	
	@Autowired
	private FoodItemDao foodItemDao;
	
	@Autowired
	private CustomerDao customerDao;
	
	@Autowired
	private PaymentDao paymentDao;
	
	private DeliveryPersonDao deliveryPersonDao;
	
	@PersistenceContext
	private EntityManager entityManager;
	
	
	
	
	//Will return all orders
	public List<Orders> findAllOrders(){
		return ordersDao.findAll();
	}
	
	
	
	public OrdersDto addOrder(PlaceOrderDto placeOrderDto) {
		OrdersDto ordersDto=null;
		
		try {
			Orders order=new Orders();
			
			Customer cust=customerDao.getById(placeOrderDto.getCustomerId());
			
			//Restaurent rest=restaurentDao.getByIdAat yetos nal)
			
Restaurent rest = restaurentDao.getById(placeOrderDto.getRestaurantId());
			
			order.setCustomerId(cust);
			order.setRestaurantId(rest);
			order.setAssignToDeliveryPersonId(null);
			order.setStatus("arrived");
			
			Orders ordersEntity = ordersDao.save(order);
			System.out.println(ordersEntity);
			
			placeOrderDto.getFoodItemsInOrder().forEach(orderItem -> orderItemDao.save(new OrderItem(
						ordersEntity,
						foodItemDao.getById(orderItem.getFoodItemId()),
						orderItem.getFoodName(),
						orderItem.getFoodPrice(),
						orderItem.getFoodQuantity()
					)));
			
			// save payment
			Payment payment=new Payment();
			payment.setCustomerId(cust);
			payment.setOrderId(ordersEntity);
			payment.setStatus("paid");
			paymentDao.save(payment);
			
			// construct orderDto to send back
			entityManager.refresh(ordersEntity);
			ordersDto = DaoToEntityConverter.orderToOrderDto(ordersEntity);
			
			
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}

		return ordersDto;
			
			
			
			
		}
	
	
//This will give order by its id	
public Optional<Orders> getOrdersById(int id) {
	return ordersDao.findById(id);
}

public DeliveryPerson getdeliveryPersonHomePageDtoById (int id) {
	Optional<Orders> orders = getOrdersById(id);
	Orders o = null;
	try {
		o = orders.get();
	} catch (Exception e) {
		o = null;
		return null;
	}
	
	DeliveryPerson Dto = DaoToEntityConverter.toDeliveryPersonDTO(o);
	return Dto;
	
}


public List<OrdersDto> findAllOrdersByCustomerId(int customerId) {
	List<OrdersDto> ordersDto = null;
	try {
		Customer cust = customerDao.getById(customerId);
		List<Orders> orderList = cust.getOrders();
		ordersDto = DaoToEntityConverter.ordersToOrdersDto(orderList);
	} catch (Exception e) {
		return null;
	}
	
	return ordersDto;
}



//Find all orders by delivery person

public List<DeliveryPerson> findAllOrdersByDeliveryPerson(int deliveryPersonId) {
	List<DeliveryPerson> dphpdtoList = new ArrayList<DeliveryPerson>();
	try {
		DeliveryPerson deliveryPerson = deliveryPersonDao.getById(deliveryPersonId);
		List<Orders> orders = deliveryPerson.getOrders();
		orders.forEach(order -> dphpdtoList.add(DaoToEntityConverter.toDeliveryPersonDTO(order)));
	} catch (Exception e) {
		return null;
	}
	return dphpdtoList;	
}



public boolean assignDeliveryPersonToOrder(int orderId, int deliveryPersonId) {
	try {
		Orders order = ordersDao.getById(orderId);
		DeliveryPerson deliveryPerson = deliveryPersonDao.getById(deliveryPersonId);
		order.setStatus("out for delivery");
		order.setAssignToDeliveryPersonId(deliveryPerson);
	} catch (Exception e) {
		return false;
	}
	return true;
}


public List<DeliveryPerson> findArrivedordersByDeliverypersonIdAndStatus(int deliverypersonId, String status) {
	DeliveryPerson deliveryperson = deliveryPersonDao.getById(deliverypersonId);
	List<Orders> orderslist = ordersDao.findByAssignToDeliveryPersonIdAndStatus(deliveryperson,status);
	List<DeliveryPerson> deliverypersonHomePageDtoList = new ArrayList<DeliveryPerson>();
	orderslist.forEach(order -> deliverypersonHomePageDtoList.add(DaoToEntityConverter.toDeliveryPersonDTO(order)));
	
	return deliverypersonHomePageDtoList;
}


public List<Orders> findArrivedOrdersByRestaurantIdAndStatus(int restId, String status) {
	Restaurent rest = restaurentDao.getById(restId);
	List<Orders> orders = new ArrayList<Orders>();
	orders = ordersDao.findByRestaurentIdAndStatus(rest, status);
//	System.out.println(orders);
	return orders;
}



public List<Orders> findAllOrdersByRestaurantid(int restId) {
	Restaurent rest = restaurentDao.getById(restId);
	List<Orders> ordersList = ordersDao.findByRestaurentId(rest);
	return ordersList;
}


public boolean setStatusForOrder(int orderId, String status) {
	try {
		Orders order = ordersDao.getById(orderId);
		order.setStatus(status);
		ordersDao.save(order);
	} catch (Exception e) {
		return false;
	}
	
	return true;
}





}
